{"id":"index.html","dependencies":[{"name":"./..\\..\\..\\style.css","dynamic":true,"resolved":"C:\\_development\\switchfully\\track-shared\\50-web-development\\20-javascript-typescript\\10-javascript\\style.css","parent":"C:\\_development\\switchfully\\track-shared\\50-web-development\\20-javascript-typescript\\10-javascript\\50-modules\\10-basic\\codelab02\\index.html"},{"name":"./index.js","dynamic":true,"resolved":"C:\\_development\\switchfully\\track-shared\\50-web-development\\20-javascript-typescript\\10-javascript\\50-modules\\10-basic\\codelab02\\index.js","parent":"C:\\_development\\switchfully\\track-shared\\50-web-development\\20-javascript-typescript\\10-javascript\\50-modules\\10-basic\\codelab02\\index.html"},{"name":"C:\\_development\\switchfully\\track-shared\\50-web-development\\20-javascript-typescript\\10-javascript\\50-modules\\10-basic\\codelab02\\package.json","includedInParent":true,"mtime":1637920779881}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <link rel=\"stylesheet\" href=\"/a230ed516471c6c03af9426dea1b0f14.css\">\r\n    <title></title>\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n    <div>\r\n        <div class=\"exercise-field\">\r\n            <h1>Modules</h1>\r\n        </div>\r\n    </div>\r\n</div>\r\n</body>\r\n<script src=\"/168726dbe96b3ce427e7fedce31bb0bc.js\">/*\r\n        Just like in java you can download and use modules from the internet.\r\n        If you open index.js you'll see that we want to use a library called lodash.\r\n\r\n        Lodash is something like a stream api, with all kind of neat functionalities.\r\n\r\n        Open index.html and look in the console. You'll see that your are getting an error.\r\n        Why? Well we haven't installed lodash yet!\r\n\r\n        Let's start by making a npm project.\r\n        (0. Make sure you've installed npm. Try npm --version to check that it's there)\r\n        1. Go to your terminal\r\n        2. Navigate to the root of this codelab\r\n        3. Execute \"npm init -y\"\r\n\r\n        You should now have a package.json file, which is almost the same as a pom.xml file for maven.\r\n\r\n\r\n        Now we've our basics let's install lodash.\r\n        1. type \"npm install lodash --save\" in your terminal\r\n        2. npm should have created a node_modules/ directory with a lodash/ subdirectory\r\n\r\n        Try out index.html again.\r\n\r\n        Damn still doesn't work. What's happening?\r\n\r\n        The browser doesn't find the file named 'lodash'.\r\n        We can let the import point to the correct file. Replace \"from 'lodash'\" with \"from './node_modules/lodash/index.js'\"\r\n\r\n        Try out index.html again.\r\n\r\n        Still doesn't work! But we're almost there!\r\n        What is happening now?\r\n\r\n        The browsers complains he can't find the right module syntax.\r\n        This happens because how weird the javascript world is shaped and everybody just kinda does it own thing.\r\n        See browsers and Node both wanted to work with javascript but for different reasons (the one frontend the other backend).\r\n        Since they both had a need for modules they both developed a module system (browsers use the ESModules and Node CommonJS).\r\n        Unluckily for us they are incompatible with each other.\r\n\r\n        Luckily there are some tools that let you combine both module systems and let you use lodash in the browser.\r\n        A bundler will bundle (duh) your javascript.\r\n        It will transform all you're files and dependencies and put them in all in one file.\r\n        That way your browser will no longer have any problems reading your files.\r\n\r\n        Every bundler can run in two modes.\r\n        - In the first mode (production) the bundler will produce a bundled file and put it in a dist/ folder.\r\n            -> This bundled file is typically your end result and you can compare it to a war or ear file\r\n        - In the second mode (development) the bundler will server your files.\r\n            -> In this mode the bundler compiles your files on the fly. While also providing an endpoint where you can test your application.\r\n\r\n        Let's try building the application first.\r\n\r\n        First install the bundler with following command \"npm install --global parcel-bundler\".\r\n        Then bundle your index.js file with \"parcel build index.js\"\r\n        After the command has been executed you should have a dist/ folder with an index.js file in it.\r\n        Change your index.html file so that it points to your new bundled index.js file.\r\n        Test your application.\r\n        This time it should work!\r\n\r\n        This is a heavy procedure for if you want to test something quickly.\r\n        Let's try out development mode!\r\n\r\n        Change your index.html file so that it yet again points to the original index.js file.\r\n        Type \"parcel index.html\"\r\n        Open the link the appears in the terminal.\r\n        Your website should open and everything should work.\r\n\r\n\r\n        Typescript and Angular come with their own build in bundlers. They work almost exactly the same as parcel, with some extra bells and wisthles.\r\n     */</script>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"bb0ff31b3047eebf3f9f258055c942af","cacheData":{"env":{}}}